from pathlib import Path
path = Path('App.tsx')
text = path.read_text(encoding='utf-8')
text = text.replace("import { TimetableView } from './components/TimetableView';", "import { TimetableView } from './components/TimetableView';\nimport { MobileSchedule } from './components/MobileSchedule';")
text = text.replace("import { solveTimetableLocally } from './services/localSolver';", "import { solveTimetableLocally } from './services/localSolver';\nimport { buildSchedulePdf } from './services/pdfExporter';")
text = text.replace("const [printMode, setPrintMode] = useState<'selected' | 'classes' | 'teachers'>('selected');\n    const [printMenuOpen, setPrintMenuOpen] = useState<boolean>(false);", "const [printMode, setPrintMode] = useState<'selected' | 'classes' | 'teachers'>('selected');\n    const [printMenuOpen, setPrintMenuOpen] = useState<boolean>(false);\n    const [isExportingPdf, setIsExportingPdf] = useState<boolean>(false);")
text = text.replace("    const handlePrint = () => { window.print(); };\n", "")
needle = "    const handleExportSchedule = () => {\n        if (!schedule) return;\n        const jsonString = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify({ data, schedule }, null, 2))}`;\n        const link = document.createElement(\"a\");\n        link.href = jsonString;\n        link.download = \"ders-programi.json\";\n        link.click();\n    };\n\n"
replacement = needle + "    const handlePdfExport = async (mode: typeof printMode) => {\n        if (!schedule) {\n            alert('Önce program oluþturmalýsýnýz.');\n            setPrintMenuOpen(false);\n            return;\n        }\n        setPrintMode(mode);\n        setIsExportingPdf(true);\n        try {\n            const { doc, fileName } = buildSchedulePdf({\n                schedule,\n                data,\n                schoolHours,\n                maxDailyHours,\n                mode,\n                viewType,\n                selectedHeaderId: viewMode === 'single' ? selectedHeaderId : null,\n                viewMode,\n            });\n            const blob = doc.output('blob');\n            const nav: any = typeof navigator !== 'undefined' ? navigator : null;\n            if (nav?.share && typeof nav.canShare === 'function') {\n                try {\n                    const file = new File([blob], fileName, { type: 'application/pdf' });\n                    if (nav.canShare({ files: [file] })) {\n                        await nav.share({ files: [file], title: fileName });\n                    } else {\n                        doc.save(fileName);\n                    }\n                } catch (shareError):\n                    print('Share failed', shareError)\n                    doc.save(fileName)\n            } else:\n                doc.save(fileName)\n        } catch (err):\n            import traceback;\n            traceback.print_exc()\n            raise
